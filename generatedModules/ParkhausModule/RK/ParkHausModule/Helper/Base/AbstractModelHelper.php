<?php
/**
 * ParkHaus.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://oldtimer-ig-osnabrueck.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\ParkHausModule\Helper\Base;

use RK\ParkHausModule\Entity\Factory\ParkHausFactory;

/**
 * Helper base class for model layer methods.
 */
abstract class AbstractModelHelper
{
    /**
     * @var ParkHausFactory
     */
    private $entityFactory;

    /**
     * @var ControllerHelper
     */
    private $controllerHelper;

    /**
     * ModelHelper constructor.
     *
     * @param ParkHausFactory $entityFactory ParkHausFactory service instance
     * @param ControllerHelper $controllerHelper ControllerHelper service instance
     */
    public function __construct(ParkHausFactory $entityFactory, ControllerHelper $controllerHelper)
    {
        $this->entityFactory = $entityFactory;
        $this->controllerHelper = $controllerHelper;
    }

    /**
     * Determines whether creating an instance of a certain object type is possible.
     * This is when
     *     - no tree is used
     *     - it has no incoming bidirectional non-nullable relationships.
     *     - the edit type of all those relationships has PASSIVE_EDIT and auto completion is used on the target side
     *       (then a new source object can be created while creating the target object).
     *     - corresponding source objects exist already in the system.
     *
     * Note that even creation of a certain object is possible, it may still be forbidden for the current user
     * if he does not have the required permission level.
     *
     * @param string $objectType Name of treated entity type
     *
     * @return boolean Whether a new instance can be created or not
     *
     * @throws Exception If an invalid object type is used
     */
    public function canBeCreated($objectType)
    {
        if (!in_array($objectType, $this->controllerHelper->getObjectTypes('helper', ['helper' => 'model', 'action' => 'canBeCreated']))) {
            throw new Exception('Error! Invalid object type received.');
        }
    
        $result = false;
    
        switch ($objectType) {
            case 'vehicle':
                $result = true;
                break;
            case 'vehicleImage':
                $result = true;
                break;
        }
    
        return $result;
    }

    /**
     * Determines whether there exist at least one instance of a certain object type in the database.
     *
     * @param string $objectType Name of treated entity type
     *
     * @return boolean Whether at least one instance exists or not
     *
     * @throws Exception If an invalid object type is used
     */
    protected function hasExistingInstances($objectType)
    {
        if (!in_array($objectType, $this->controllerHelper->getObjectTypes('helper', ['helper' => 'model', 'action' => 'hasExistingInstances']))) {
            throw new Exception('Error! Invalid object type received.');
        }
    
        $repository = $this->entityFactory->getRepository($objectType);
    
        return $repository->selectCount() > 0;
    }
}
