<?php
/**
 * ParkHaus.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://oldtimer-ig-osnabrueck.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\ParkHausModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use RK\ParkHausModule\Traits\StandardFieldsTrait;

use DataUtil;
use FormUtil;
use RuntimeException;
use ServiceUtil;
use UserUtil;
use Zikula_Workflow_Util;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for vehicle image entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractVehicleImageEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour.
     * Updates createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'vehicleImage';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @var array The current workflow data of this object
     */
    protected $__WORKFLOW__ = [];
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * e.g. the location or the event
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $titel
     */
    protected $titel = '';
    
    /**
     * Vehicle image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $vehicleImageMeta
     */
    protected $vehicleImageMeta = [];
    
    /**
     * Please upload an image. It does not matter if it is portrait, landscape or square. The hight will be harmonized always.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Regex(pattern="/\s/", match=false, message="This value must not contain space chars.")
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $vehicleImage
     */
    protected $vehicleImage = null;
    
    /**
     * Full vehicle image path as url.
     *
     * @Assert\Type(type="string")
     * @Assert\Url()
     * @var string $vehicleImageUrl
     */
    protected $vehicleImageUrl = '';
    /**
     * Please fill the copyright. If you got the image from someone else please be fair and name him here.
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $copyright
     */
    protected $copyright = '';
    
    /**
     * the image date will be added to the title
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $imageDate
     */
    protected $imageDate = '';
    
    /**
     * @ORM\Column(type="text", length=2000, nullable=true)
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * If not checked the image will not been shown to the public. Only IG members are able to see.
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $viewImage
     */
    protected $viewImage = true;
    
    /**
     * If this filed is changed the image will be shown as created by this suer. It also will apper in his account settings.
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @var integer $vehicleOwner
     */
    protected $vehicleOwner = 0;
    
    
    /**
     * Bidirectional - Many vehicleImages [vehicle images] are linked by one vehicle [vehicle] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="RK\ParkHausModule\Entity\VehicleEntity", inversedBy="vehicleImages")
     * @ORM\JoinTable(name="rk_parkha_vehicle")
     * @Assert\Type(type="RK\ParkHausModule\Entity\VehicleEntity")
     * @Assert\Valid()
     * @var \RK\ParkHausModule\Entity\VehicleEntity $vehicle
     */
    protected $vehicle;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->initWorkflow();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Returns the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Returns the __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Sets the __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__
     *
     * @return void
     */
    public function set__WORKFLOW__($__WORKFLOW__ = [])
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = intval($id);
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = isset($workflowState) ? $workflowState : '';
    }
    
    /**
     * Returns the titel.
     *
     * @return string
     */
    public function getTitel()
    {
        return $this->titel;
    }
    
    /**
     * Sets the titel.
     *
     * @param string $titel
     *
     * @return void
     */
    public function setTitel($titel)
    {
        $this->titel = isset($titel) ? $titel : '';
    }
    
    /**
     * Returns the vehicle image.
     *
     * @return string
     */
    public function getVehicleImage()
    {
        return $this->vehicleImage;
    }
    
    /**
     * Sets the vehicle image.
     *
     * @param string $vehicleImage
     *
     * @return void
     */
    public function setVehicleImage($vehicleImage)
    {
        $this->vehicleImage = isset($vehicleImage) ? $vehicleImage : '';
    }
    
    /**
     * Returns the vehicle image url.
     *
     * @return string
     */
    public function getVehicleImageUrl()
    {
        return $this->vehicleImageUrl;
    }
    
    /**
     * Sets the vehicle image url.
     *
     * @param string $vehicleImageUrl
     *
     * @return void
     */
    public function setVehicleImageUrl($vehicleImageUrl)
    {
        $this->vehicleImageUrl = isset($vehicleImageUrl) ? $vehicleImageUrl : '';
    }
    
    /**
     * Returns the vehicle image meta.
     *
     * @return array
     */
    public function getVehicleImageMeta()
    {
        return $this->vehicleImageMeta;
    }
    
    /**
     * Sets the vehicle image meta.
     *
     * @param array $vehicleImageMeta
     *
     * @return void
     */
    public function setVehicleImageMeta($vehicleImageMeta = [])
    {
        $this->vehicleImageMeta = isset($vehicleImageMeta) ? $vehicleImageMeta : '';
    }
    
    /**
     * Returns the copyright.
     *
     * @return string
     */
    public function getCopyright()
    {
        return $this->copyright;
    }
    
    /**
     * Sets the copyright.
     *
     * @param string $copyright
     *
     * @return void
     */
    public function setCopyright($copyright)
    {
        $this->copyright = $copyright;
    }
    
    /**
     * Returns the image date.
     *
     * @return string
     */
    public function getImageDate()
    {
        return $this->imageDate;
    }
    
    /**
     * Sets the image date.
     *
     * @param string $imageDate
     *
     * @return void
     */
    public function setImageDate($imageDate)
    {
        $this->imageDate = isset($imageDate) ? $imageDate : '';
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    
    /**
     * Returns the view image.
     *
     * @return boolean
     */
    public function getViewImage()
    {
        return $this->viewImage;
    }
    
    /**
     * Sets the view image.
     *
     * @param boolean $viewImage
     *
     * @return void
     */
    public function setViewImage($viewImage)
    {
        if ($viewImage !== $this->viewImage) {
            $this->viewImage = (bool)$viewImage;
        }
    }
    
    /**
     * Returns the vehicle owner.
     *
     * @return integer
     */
    public function getVehicleOwner()
    {
        return $this->vehicleOwner;
    }
    
    /**
     * Sets the vehicle owner.
     *
     * @param integer $vehicleOwner
     *
     * @return void
     */
    public function setVehicleOwner($vehicleOwner)
    {
        $this->vehicleOwner = intval($vehicleOwner);
    }
    
    
    /**
     * Returns the vehicle.
     *
     * @return \RK\ParkHausModule\Entity\VehicleEntity
     */
    public function getVehicle()
    {
        return $this->vehicle;
    }
    
    /**
     * Sets the vehicle.
     *
     * @param \RK\ParkHausModule\Entity\VehicleEntity $vehicle
     *
     * @return void
     */
    public function setVehicle($vehicle = null)
    {
        $this->vehicle = $vehicle;
    }
    
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $serviceManager = ServiceUtil::getManager();
        $listHelper = $serviceManager->get('rk_parkhaus_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getTitel()
                . ' '
                . $this->getImageDate();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('rk_parkhaus_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForVehicleImage();
    
        $allowedValues = ['initial'];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Checks whether the vehicleOwner field contains a valid user id.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     *
     * @return boolean True if data is valid else false
     */
    public function isVehicleOwnerUserValid()
    {
        if ($this['vehicleOwner'] < 1) {
            return true;
        }
    
        $uname = UserUtil::getVar('uname', $this['vehicleOwner']);
    
        return null !== $uname && !empty($uname);
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record
     *
     * @throws RuntimeException Thrown if retrieving the workflow object fails
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('rk_parkhaus_module.workflow_helper');
        
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = [
            'module' => 'RKParkHausModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName
        ];
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, ['index', 'view', 'display']) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'RKParkHausModule');
            if (!$result) {
                $flashBag = $serviceManager->get('session')->getFlashBag();
                $flashBag->add('error', $serviceManager->get('translator.default')->__('Error! Could not load the associated workflow.'));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
    
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('rk_parkhaus_module.workflow_helper');
    
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = [
            'module' => 'RKParkHausModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName
        ];
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if (true === $this->_bypassValidation) {
            return true;
        }
    
        $serviceManager = ServiceUtil::getManager();
    
        $validator = $serviceManager->get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $flashBag = $serviceManager->get('session')->getFlashBag();
            foreach ($errors as $error) {
                $flashBag->add('error', $error->getMessage());
            }
    
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'rkparkhausmodule.ui_hooks.vehicleimages';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Vehicle image ' . $this->createCompositeIdentifier();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // reset Workflow
            $this->resetWorkflow();
    
            // reset upload fields
            $this->setVehicleImage('');
            $this->setVehicleImageMeta([]);
            $this->setVehicleImageUrl('');
    
            $this->setCreatedBy(null);
            $this->setCreatedDate(null);
            $this->setUpdatedBy(null);
            $this->setUpdatedDate(null);
    
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
