<?php
/**
 * Websitehelper.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://oldtimer-ig-osnabrueck.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace RK\WebsitehelperModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractWebsitehelperEvents
{
    /**
     * The rkwebsitehelpermodule.linker_post_load event is thrown when linkers
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const LINKER_POST_LOAD = 'rkwebsitehelpermodule.linker_post_load';
    
    /**
     * The rkwebsitehelpermodule.linker_pre_persist event is thrown before a new linker
     * is created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const LINKER_PRE_PERSIST = 'rkwebsitehelpermodule.linker_pre_persist';
    
    /**
     * The rkwebsitehelpermodule.linker_post_persist event is thrown after a new linker
     * has been created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const LINKER_POST_PERSIST = 'rkwebsitehelpermodule.linker_post_persist';
    
    /**
     * The rkwebsitehelpermodule.linker_pre_remove event is thrown before an existing linker
     * is removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const LINKER_PRE_REMOVE = 'rkwebsitehelpermodule.linker_pre_remove';
    
    /**
     * The rkwebsitehelpermodule.linker_post_remove event is thrown after an existing linker
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const LINKER_POST_REMOVE = 'rkwebsitehelpermodule.linker_post_remove';
    
    /**
     * The rkwebsitehelpermodule.linker_pre_update event is thrown before an existing linker
     * is updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const LINKER_PRE_UPDATE = 'rkwebsitehelpermodule.linker_pre_update';
    
    /**
     * The rkwebsitehelpermodule.linker_post_update event is thrown after an existing new linker
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const LINKER_POST_UPDATE = 'rkwebsitehelpermodule.linker_post_update';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_post_load event is thrown when carousel items
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const CAROUSELITEM_POST_LOAD = 'rkwebsitehelpermodule.carouselitem_post_load';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_pre_persist event is thrown before a new carousel item
     * is created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const CAROUSELITEM_PRE_PERSIST = 'rkwebsitehelpermodule.carouselitem_pre_persist';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_post_persist event is thrown after a new carousel item
     * has been created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const CAROUSELITEM_POST_PERSIST = 'rkwebsitehelpermodule.carouselitem_post_persist';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_pre_remove event is thrown before an existing carousel item
     * is removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const CAROUSELITEM_PRE_REMOVE = 'rkwebsitehelpermodule.carouselitem_pre_remove';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_post_remove event is thrown after an existing carousel item
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const CAROUSELITEM_POST_REMOVE = 'rkwebsitehelpermodule.carouselitem_post_remove';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_pre_update event is thrown before an existing carousel item
     * is updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const CAROUSELITEM_PRE_UPDATE = 'rkwebsitehelpermodule.carouselitem_pre_update';
    
    /**
     * The rkwebsitehelpermodule.carouselitem_post_update event is thrown after an existing new carousel item
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const CAROUSELITEM_POST_UPDATE = 'rkwebsitehelpermodule.carouselitem_post_update';
    
    /**
     * The rkwebsitehelpermodule.carousel_post_load event is thrown when carousells
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const CAROUSEL_POST_LOAD = 'rkwebsitehelpermodule.carousel_post_load';
    
    /**
     * The rkwebsitehelpermodule.carousel_pre_persist event is thrown before a new carousel
     * is created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const CAROUSEL_PRE_PERSIST = 'rkwebsitehelpermodule.carousel_pre_persist';
    
    /**
     * The rkwebsitehelpermodule.carousel_post_persist event is thrown after a new carousel
     * has been created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const CAROUSEL_POST_PERSIST = 'rkwebsitehelpermodule.carousel_post_persist';
    
    /**
     * The rkwebsitehelpermodule.carousel_pre_remove event is thrown before an existing carousel
     * is removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const CAROUSEL_PRE_REMOVE = 'rkwebsitehelpermodule.carousel_pre_remove';
    
    /**
     * The rkwebsitehelpermodule.carousel_post_remove event is thrown after an existing carousel
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const CAROUSEL_POST_REMOVE = 'rkwebsitehelpermodule.carousel_post_remove';
    
    /**
     * The rkwebsitehelpermodule.carousel_pre_update event is thrown before an existing carousel
     * is updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const CAROUSEL_PRE_UPDATE = 'rkwebsitehelpermodule.carousel_pre_update';
    
    /**
     * The rkwebsitehelpermodule.carousel_post_update event is thrown after an existing new carousel
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const CAROUSEL_POST_UPDATE = 'rkwebsitehelpermodule.carousel_post_update';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_post_load event is thrown when website images
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const WEBSITEIMAGE_POST_LOAD = 'rkwebsitehelpermodule.websiteimage_post_load';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_pre_persist event is thrown before a new website image
     * is created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const WEBSITEIMAGE_PRE_PERSIST = 'rkwebsitehelpermodule.websiteimage_pre_persist';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_post_persist event is thrown after a new website image
     * has been created in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const WEBSITEIMAGE_POST_PERSIST = 'rkwebsitehelpermodule.websiteimage_post_persist';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_pre_remove event is thrown before an existing website image
     * is removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const WEBSITEIMAGE_PRE_REMOVE = 'rkwebsitehelpermodule.websiteimage_pre_remove';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_post_remove event is thrown after an existing website image
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const WEBSITEIMAGE_POST_REMOVE = 'rkwebsitehelpermodule.websiteimage_post_remove';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_pre_update event is thrown before an existing website image
     * is updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const WEBSITEIMAGE_PRE_UPDATE = 'rkwebsitehelpermodule.websiteimage_pre_update';
    
    /**
     * The rkwebsitehelpermodule.websiteimage_post_update event is thrown after an existing new website image
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\WebsitehelperModule\Event\FilterWebsiteImageEvent instance.
     *
     * @see RK\WebsitehelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const WEBSITEIMAGE_POST_UPDATE = 'rkwebsitehelpermodule.websiteimage_post_update';
    
}
