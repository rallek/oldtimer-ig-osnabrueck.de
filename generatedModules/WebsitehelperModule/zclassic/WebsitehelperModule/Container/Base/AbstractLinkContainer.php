<?php
/**
 * WebsiteHelper.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://oldtimer-ig-osnabrueck.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace RK\WebsiteHelperModule\Container\Base;

use Symfony\Component\Routing\RouterInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\Core\Doctrine\EntityAccess;
use Zikula\Core\LinkContainer\LinkContainerInterface;
use Zikula\PermissionsModule\Api\PermissionApi;
use Zikula\UsersModule\Api\CurrentUserApi;
use RK\WebsiteHelperModule\Helper\ControllerHelper;

/**
 * This is the link container service implementation class.
 */
abstract class AbstractLinkContainer implements LinkContainerInterface
{
    use TranslatorTrait;

    /**
     * @var RouterInterface
     */
    protected $router;

    /**
     * @var PermissionApi
     */
    protected $permissionApi;

    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;

    /**
     * @var CurrentUserApi
     */
    private $currentUserApi;

    /**
     * Constructor.
     * Initialises member vars.
     *
     * @param TranslatorInterface $translator       Translator service instance
     * @param Routerinterface     $router           Router service instance
     * @param PermissionApi       $permissionApi    PermissionApi service instance
     * @param ControllerHelper    $controllerHelper ControllerHelper service instance
     * @param CurrentUserApi      $currentUserApi   CurrentUserApi service instance
     */
    public function __construct(TranslatorInterface $translator, RouterInterface $router, PermissionApi $permissionApi, ControllerHelper $controllerHelper, CurrentUserApi $currentUserApi)
    {
        $this->setTranslator($translator);
        $this->router = $router;
        $this->permissionApi = $permissionApi;
        $this->controllerHelper = $controllerHelper;
        $this->currentUserApi = $currentUserApi;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Returns available header links.
     *
     * @param string $type The type to collect links for
     *
     * @return array Array of header links
     */
    public function getLinks($type = LinkContainerInterface::TYPE_ADMIN)
    {
        $utilArgs = ['api' => 'linkContainer', 'action' => 'getLinks'];
        $allowedObjectTypes = $this->controllerHelper->getObjectTypes('api', $utilArgs);

        $permLevel = LinkContainerInterface::TYPE_ADMIN == $type ? ACCESS_ADMIN : ACCESS_READ;

        // Create an array of links to return
        $links = [];

        
        if (LinkContainerInterface::TYPE_ADMIN == $type) {
            if ($this->permissionApi->hasPermission($this->getBundleName() . '::', '::', ACCESS_READ)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_user_index'),
                    'text' => $this->__('Frontend'),
                    'title' => $this->__('Switch to user area.'),
                    'icon' => 'home'
                ];
            }
            
            if (in_array('linker', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Linker:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_linker_adminview'),
                     'text' => $this->__('Linkers'),
                     'title' => $this->__('Linker list')
                 ];
            }
            if (in_array('carouselItem', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':CarouselItem:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_carouselitem_adminview'),
                     'text' => $this->__('Carousel items'),
                     'title' => $this->__('Carousel item list')
                 ];
            }
            if (in_array('carousel', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Carousel:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_carousel_adminview'),
                     'text' => $this->__('Carousells'),
                     'title' => $this->__('Carousel list')
                 ];
            }
            if (in_array('websiteImage', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':WebsiteImage:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_websiteimage_adminview'),
                     'text' => $this->__('Website images'),
                     'title' => $this->__('Website image list')
                 ];
            }
            if ($this->permissionApi->hasPermission($this->getBundleName() . '::', '::', ACCESS_ADMIN)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_config_config'),
                    'text' => $this->__('Configuration'),
                    'title' => $this->__('Manage settings for this application'),
                    'icon' => 'wrench'
                ];
            }
        }
        if (LinkContainerInterface::TYPE_USER == $type) {
            if ($this->permissionApi->hasPermission($this->getBundleName() . '::', '::', ACCESS_ADMIN)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_admin_index'),
                    'text' => $this->__('Backend'),
                    'title' => $this->__('Switch to administration area.'),
                    'icon' => 'wrench'
                ];
            }
            
            if (in_array('linker', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Linker:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_linker_view'),
                     'text' => $this->__('Linkers'),
                     'title' => $this->__('Linker list')
                 ];
            }
            if (in_array('carouselItem', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':CarouselItem:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_carouselitem_view'),
                     'text' => $this->__('Carousel items'),
                     'title' => $this->__('Carousel item list')
                 ];
            }
            if (in_array('carousel', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Carousel:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_carousel_view'),
                     'text' => $this->__('Carousells'),
                     'title' => $this->__('Carousel list')
                 ];
            }
            if (in_array('websiteImage', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':WebsiteImage:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_websiteimage_view'),
                     'text' => $this->__('Website images'),
                     'title' => $this->__('Website image list')
                 ];
            }
            if ($this->permissionApi->hasPermission($this->getBundleName() . '::', '::', ACCESS_ADMIN)) {
                $links[] = [
                    'url' => $this->router->generate('rkwebsitehelpermodule_config_config'),
                    'text' => $this->__('Configuration'),
                    'title' => $this->__('Manage settings for this application'),
                    'icon' => 'wrench'
                ];
            }
        }

        return $links;
    }

    /**
     * Returns the name of the providing bundle.
     *
     * @return string The bundle name
     */
    public function getBundleName()
    {
        return 'RKWebsiteHelperModule';
    }
}
